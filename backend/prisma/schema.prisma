// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  username      String?            @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  accounts      Account[]
  sessions      Session[]
  conversations ConversationUser[]
  message       Message[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  users           ConversationUser[]
  message         Message[]          @relation("conversationMessages")
  latestMessageId String?            @unique
  latestMessage   Message?           @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model ConversationUser {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  hasSeenLatestMessage Boolean
  userId               String
  user                 User         @relation(fields: [userId], references: [id])
  conversationId       String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  senderId       String
  sender         User          @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  isLatestIn     Conversation? @relation("latestConversationMessage")
}
